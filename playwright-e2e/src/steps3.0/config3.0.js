const path = require('path');

module.exports = {
  login: {
    baseUrl: 'https://demo.tradingdocs.ai',
    loginPath: '/login',
    homePath: '/',
    selectors: {
      emailInput: 'input[name="email"]',
      passwordInput: 'input[name="password"]',
      submitButton: 'button[type="submit"]',
    },
    timeouts: {
      navigation: 10000,
      postLoginRedirect: 10000,
    },
  },

  shipment: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentsPath: '/shipments',
    selectors: {
      addButton: 'button[aria-label="Add"]',
      modal: '.e-dialog.e-popup-open[role="dialog"]',
      shipmentIdInput: 'input#shipmentId',
      shipperInput: 'input#shipper',
      consigneeInput: 'input#consignee',
      statusDropdownIcon: '.e-input-group-icon.e-ddl-icon.e-search-icon',
      statusPopup: '#status_popup',
      statusOptionGenerated: '#status_popup .e-list-item',
      blNumberInput: 'input#blNumber',
      commodityInput: 'input#commodity',
      originPortInput: 'input#originPort',
      destinationPortInput: 'input#destinationPort',
      vesselNameInput: 'input#vesselName',
      shipmentDateInput: 'input#shipmentDate',
      etdInput: 'input#etd',
      etaInput: 'input#eta',
      bookingNumberInput: 'input#bookingNumber',
      referenceInput: 'input#reference',
      saveButton: 'button:has-text("Save")',
      shipmentSavedPopupSelector: 'div.e-alert-dialog.e-popup-open',
      shipmentSavedPopupOkButtonSelector: 'button.predefined-dialog',
      shipmentSavedPopupSuccessMessageSelector: 'div.dialog-text > h2',
      nextPageButton: 'div.e-next[title="Go to next page"]',
    },
    rowSelectors: {
      byBL: (bl) => `tr.e-row:has(td[title="${bl}"])`,
      byShipmentIdInColumn: (shipmentId) => `tr.e-row:has(td[title="${shipmentId}"]) td[aria-colindex="4"]`
    },
    data: {
      shipmentId: 'TEST-001',
      shipper: 'Test Shipper',
      consignee: 'Test Consignee',
      blNumber: 'BL123456',
      commodity: 'Steel',
      originPort: 'Istanbul',
      destinationPort: 'Dubai',
      vesselName: 'Black Pearl',
      shipmentDate: '07/15/2025',
      etd: '07/15/2025',
      eta: '07/25/2025',
      bookingNumber: 'BOOK1234',
      reference: 'Test Reference',
      expectedSuccessText: 'Success',
      statusOption: 'Generated'
    },
    timeouts: {
      generalWait: 500,
      saveProcessing: 1000,
      pageLoad: 10000,
      buttonVisible: 5000,
      modalVisible: 5000,
      inputVisible: 5000,
      statusPopupVisible: 5000,
      statusOptionVisible: 5000,
      modalOpen: 10000,
      modalClose: 10000,
      shipmentSavedPopupTimeout: 10000,
    },
  },

 captureDocuments: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-001',
    selectors: {
      tableRow: 'tr.e-row',
      tableHeader: 'thead tr',
      checkbox: 'div.e-checkbox-wrapper',
      selectedRow: 'tr.e-row.e-selectionbackground, tr.e-row.e-active, tr.e-row[aria-selected="true"]',
      captureButton: '#captureBtn',
      modal: 'div.e-dialog.e-popup-open[role="dialog"]',
      dropdown: 'span.e-input-group.e-control-wrapper.e-ddl.e-lib.e-keyboard',
      modalCaptureButton: 'button.e-control.e-btn.e-lib.e-primary.e-flat',
      okButton: 'button.predefined-dialog.e-control.e-btn.e-lib.e-primary.e-flat',
      documentNameCell: 'td[data-field="documentName"]',
    },
    captureData: {
      targetDocument: 'Purchase Order - A',
    },
    timeouts: {
      tableRow: 10000,
      captureButton: 7000,
      modal: 7000,
      modalCapture: 7000,
      modalClose: 7000,
      okButton: 7000,
      shortDelay: 500,
      dropdownDelay: 1000,
      captureDelay: 2000,
    },
  },
  uploadFile: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-001',
     selectors: {
      uploadCardButton: '.upload-card button.btn-link',
      fileInput: '#fileUpload',
      uploadButton: '.e-footer-content button.e-primary:has-text("Upload")',
      successDialog: '.e-alert-dialog .predefined-dialog-content',
      successHeader: '.e-alert-dialog .dialog-text h2',
      successMessage: '.e-alert-dialog .dialog-text p',
      okButton: '.e-alert-dialog button.predefined-dialog:has-text("OK")',
      alertDialog: '.e-alert-dialog',
    },
    uploadData: {
      fileName: path.resolve(__dirname, '../Sample Purchase Order-1752667727464.pdf'),
    },
    expectedSuccess: {
      header: 'Success',
      message: 'Files uploaded successfully and sent for processing',
    },
    timeouts: {
      clickHereButton: 15000,
      uploadButton: 10000,
      successDialog: 15000,
      okButton: 15000,
      dialogClose: 5000,
    },
    messages: {
      clickHereClicked: '‚úÖ Clicked "Click Here" to open file selector',
      fileSet: '‚úÖ File set for upload',
      uploadClicked: '‚úÖ Upload button clicked',
      successVerified: '‚úÖ Upload success message verified',
      okClicked: '‚úÖ OK button clicked via evaluate',
      popupClosed: '‚úÖ Upload success popup closed',
      pageReloaded: 'üîÑ Page reloaded after file upload',
    },
  },

  complyShipment: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-001',
    selectors: {
      popover: '#driver-popover-content',
      popoverCloseBtn: '#driver-popover-content .driver-popover-close-btn',
      complyButton: 'button:has-text("Comply")',
      rulesetInput: '#rulesetTemplate',
      rulesetDropdownIcon: '#rulesetTemplate ~ .e-input-group-icon.e-ddl-icon',
      rulesetPopup: '#rulesetTemplate_popup',
      rulesetListItem: '#rulesetTemplate_popup .e-list-item',
      selectButton: '.e-dialog .e-footer-content button:has-text("Select")',
      statusBadge: 'td[data-field="status"] .status-badge span.text-white',
    },
    defaultRulesetName: 'Demo Ruleset',
    expectedFileStatus: 'Splitted',
    timeouts: {
      pageLoad: 10000,
      initialWait: 2000,
      popoverVisible: 5000,
      popoverHidden: 7000,
      uiStabilize: 1000,
      rulesetInputVisible: 15000,
      rulesetPopupVisible: 15000,
      rulesetOptionsVisible: 7000,
      optionSettle: 500,
      selectionRegister: 800,
      fileStatusCheck: 90000,
      fileStatusInterval: 5000,
    },
    messages: {
      navigated: 'üöÄ Navigated to shipment page',
      popoverWait: '‚è≥ Waiting for possible popover (max 5s)...',
      popoverDetected: '‚ö†Ô∏è Popover detected, attempting to close it...',
      popoverClosed: '‚úÖ Popover closed successfully',
      noPopover: '‚úÖ No popover detected ‚Äî continuing.',
      complyClicked: '‚úÖ Clicked "Comply (All)" button',
      rulesetInputVisible: '‚úÖ Ruleset input field visible',
      dropdownClicked: '‚úÖ Clicked dropdown icon for ruleset list',
      rulesetSelected: '‚úÖ Selected ruleset: "{rulesetName}"',
      selectClicked: '‚úÖ Clicked "Select" to confirm ruleset',
      waitingForStatus: '‚è≥ Waiting for file status to change to "{expectedStatus}"...',
      statusChanged: '‚úÖ File status changed to "{expectedStatus}"',
      currentStatus: '‚è≥ Current status: "{currentStatus}", waiting...',
      statusNotFound: '‚è≥ Status element not found yet, continuing to wait...',
      statusTimeout: 'Timeout: File status did not change to "{expectedStatus}" within {maxWaitTime}ms',
    },
  },
  checkDiscrepancies: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-001',
    selectors: {
      popover: '#driver-popover-content',
      popoverCloseBtn: '#driver-popover-content .driver-popover-close-btn',
      discrepanciesTab: 'a[data-bs-target="#inconsistencies"]',
      inconsistenciesContent: '#inconsistencies',
      columnChooserSelectors: [
        '#inconsistencies .e-toolbar-item[title="Column Chooser"] button',
        '#inconsistencies .e-toolbar .e-cc-toolbar button[aria-label="Column Chooser"]',
        '#inconsistencies .e-toolbar button[title="Column Chooser"]',
        '#inconsistencies .e-cc-toolbar button.e-cc-icon'
      ],
      searchInput: 'input#textbox_0.e-control.e-textbox',
      notesCheckbox: 'input#field-notes',
      applyButton: 'button.grid-settings-dialog.e-control.e-btn.e-lib.e-flat.e-primary',
      notesCells: 'td[data-field="notes"]',
      nextPageButton: 'div.e-next.e-icons.e-icon-next.e-nextpage.e-pager-default',
    },
    timeouts: {
      initialWait: 2000,
      tabVisible: 15000,
      contentVisible: 15000,
      columnChooserWait: 2000,
      searchInputBlur: 800,
      checkboxWait: 1000,
      applyButtonWait: 2000,
      networkIdle: 15000,
      notesCellsAttached: 15000,
    },
    messages: {
      navigated: 'üöÄ Navigated to TEST-001',
      tabClicked: '‚úÖ Discrepancies tab clicked',
      chooserClicked: '‚úÖ Column Chooser clicked',
      searchInputBlurred: '‚úÖ Search input blurred',
      notesCheckboxClicked: '‚úÖ Notes checkbox clicked',
      notesCheckboxAlreadyChecked: '‚úÖ Notes checkbox already checked',
      notesCheckboxNotFound: '‚ùå Notes checkbox not found',
      applyButtonClicked: '‚úÖ Apply button clicked via JS',
      applyButtonFallback: '‚úÖ Apply button clicked via Playwright force click',
      settingsApplied: '‚úÖ Column settings applied, ready to check discrepancies',
      pageReloaded: 'üîÑ Page reloaded',
      contentReloaded: '‚úÖ Discrepancies content reloaded',
      nextPage: '‚û°Ô∏è Moving to next page...',
      lastPage: '‚úÖ Last page reached, no more pages to process.',
      notesFound: '‚úÖ Notes found across all pages:',
      noNotesFound: '‚ö†Ô∏è No Notes found in any pages.',
      chooserNotFound: '‚ùå Column Chooser button not found',
      searchInputVisible: 'üõë Search input visible ‚Äî blurring it...',
      applyButtonNotVisible: '‚ö†Ô∏è Apply button not visible, attempting force click...',
      applyJSFailed: '‚ùå Apply JS click failed, fallback to Playwright force click...',
    },
    excludedNoteTexts: ['undefined'],
  },
};
