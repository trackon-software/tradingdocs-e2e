module.exports = {
  login: {
    baseUrl: 'https://demo.tradingdocs.ai',
    loginPath: '/login',
    homePath: '/',
    selectors: {
      emailInput: 'input[name="email"]',
      passwordInput: 'input[name="password"]',
      submitButton: 'button[type="submit"]',
    },
    timeouts: {
      navigation: 10000,
      postLoginRedirect: 10000,
    },
  },
  
  createShipment: {
  baseUrl: 'https://demo.tradingdocs.ai',
  shipmentsPath: '/shipments',
  selectors: {
    // Main action buttons
    addButton: 'text=Add',
    editButton: 'button[aria-label="Edit"]',
    deleteButton: 'button[aria-label="Delete"]',
    confirmDeleteButton: 'button:has-text("Yes")',

    // Form container
    shipmentForm: 'form#shipmentForm', // √∂rnek ID, ger√ßek ID‚Äôye g√∂re g√ºncellenebilir

    // Form input fields
    shipmentIdInput: '#shipmentId',
    shipperInput: '#shipper',
    consigneeInput: '#consignee',
    blNumberInput: '#blNumber',
    commodityInput: '#commodity',
    originPortInput: '#originPort',
    destinationPortInput: '#destinationPort',
    vesselNameInput: '#vesselName',
    shipmentDateInput: '#shipmentDate',
    etdInput: '#etd',
    etaInput: '#eta',
    bookingNumberInput: '#bookingNumber',
    referenceInput: '#reference',

    // Dropdowns
    statusDropdownIcon: '.e-input-group-icon.e-ddl-icon',
    statusPopup: '#status_popup',
    statusOptionGenerated: '.dropdown-item-template:has-text("Generated")',

    // Save and feedback
    saveButton: 'button:has-text("Save")',
    successPopup: '.e-alert-dialog .predefined-dialog',
    successHeader: '.e-alert-dialog .dialog-text h2',
    successMessage: '.e-alert-dialog .dialog-text p',
  },

  shipmentData: {
    shipmentId: 'TEST-002',
    shipper: 'TEST_SHIPPER',
    consignee: 'TEST_CONSIGNEE',
    blNumber: 'BL123456',
    commodity: 'STEEL',
    originPort: 'Istanbul',
    destinationPort: 'Dubai',
    vesselName: 'Black Pearl',
    shipmentDate: '07/15/2025',
    etd: '07/15/2025',
    eta: '07/25/2025',
    bookingNumber: 'BOOK1234',
    reference: 'Test Ref',
  },

  expectedSuccess: {
    header: 'Success',
    message: 'Document shipment created successfully.',
  },

  timeouts: {
    pageLoad: 10000,
    formVisible: 5000,
    statusPopupVisible: 10000,
    statusOptionVisible: 5000,
    statusOptionDelayAfterClick: 500,
    saveSuccessPopupVisible: 10000,
    popupCloseTimeout: 5000,
    networkIdle: 10000,
  },
},

  
  createRuleset: {
    baseUrl: 'https://demo.tradingdocs.ai',
    rulesetsPath: '/rulesets',
    selectors: {
      pageTitle: 'text=Rulesets',
      addButton: 'span.e-tbar-btn-text:has-text("Add")',
      rulesetNameInput: '#rulesetName',
      rulesetDescriptionInput: '#rulesetDescription',
      commodityInput: '#commodity',
      destinationCountryInput: '#destinationCountry',
      originCountryInput: '#originCountry',
      effectiveDateInput: '#effectiveDate',
      rulesetSourceInput: '#rulesetSource',
      rulesInput: '#rules',
      rulesetTypeDropdownIcon: '#rulesetType ~ .e-input-group-icon.e-ddl-icon',
      rulesetTypePopup: '#rulesetType_popup',
      rulesetTypeListItem: '#rulesetType_popup .e-list-item',
      metadataAccordion: '.e-acrdn-header:has-text("Metadata")',
      isActiveDropdown: '#isActive',
      isActiveDropdownIcon: '#isActive ~ .e-input-group-icon.e-ddl-icon',
      isActivePopup: '#isActive_popup',
      isActiveListItem: '#isActive_popup .e-list-item',
      isActiveYOption: '#isActive_popup .e-list-item:has-text("Y")',
      saveButton: 'button.e-edit-dialog.submit-button',
      successText: 'text=Test Ruleset',
    },
    rulesetData: {
      rulesetName: 'Test Ruleset',
      rulesetDescription: 'Automatically created via Playwright',
      commodity: 'Steel',
      destinationCountry: 'UAE',
      originCountry: 'Turkey',
      effectiveDate: '07/14/2025',
      rulesetSource: 'Auto Test',
      rules: 'IF commodity == "Steel" THEN apply tax',
    },
    timeouts: {
      pageLoad: 10000,
      formVisible: 5000,
      inputFillDelay: 100,
      beforeDropdownSelection: 500,
      dropdownVisible: 5000,
      dropdownSettle: 500,
      beforeAccordion: 500,
      accordionAnimation: 500,
      beforeSave: 300,
      successVisible: 10000,
    },
  },
  
  checkDiscrepancies: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-002',
    selectors: {
      popover: '#driver-popover-content',
      popoverCloseBtn: '#driver-popover-content .driver-popover-close-btn',
      discrepanciesTab: 'a[data-bs-target="#inconsistencies"]',
      inconsistenciesContent: '#inconsistencies',
      columnChooserSelectors: [
        '#inconsistencies .e-toolbar-item[title="Column Chooser"] button',
        '#inconsistencies .e-toolbar .e-cc-toolbar button[aria-label="Column Chooser"]',
        '#inconsistencies .e-toolbar button[title="Column Chooser"]',
        '#inconsistencies .e-cc-toolbar button.e-cc-icon'
      ],
      searchInput: 'input#textbox_0.e-control.e-textbox',
      notesCheckbox: 'input#field-notes',
      applyButton: 'button.grid-settings-dialog.e-control.e-btn.e-lib.e-flat.e-primary',
      notesCells: 'td[data-field="notes"]',
      nextPageButton: 'div.e-next.e-icons.e-icon-next.e-nextpage.e-pager-default',
    },
    timeouts: {
      initialWait: 2000,
      tabVisible: 15000,
      contentVisible: 15000,
      columnChooserWait: 2000,
      searchInputBlur: 800,
      checkboxWait: 1000,
      applyButtonWait: 2000,
      networkIdle: 15000,
      notesCellsAttached: 15000,
    },
    messages: {
      navigated: 'üöÄ Navigated to TEST-002',
      tabClicked: '‚úÖ Discrepancies tab clicked',
      chooserClicked: '‚úÖ Column Chooser clicked',
      searchInputBlurred: '‚úÖ Search input blurred',
      notesCheckboxClicked: '‚úÖ Notes checkbox clicked',
      notesCheckboxAlreadyChecked: '‚úÖ Notes checkbox already checked',
      notesCheckboxNotFound: '‚ùå Notes checkbox not found',
      applyButtonClicked: '‚úÖ Apply button clicked via JS',
      applyButtonFallback: '‚úÖ Apply button clicked via Playwright force click',
      settingsApplied: '‚úÖ Column settings applied, ready to check discrepancies',
      pageReloaded: 'üîÑ Page reloaded',
      contentReloaded: '‚úÖ Discrepancies content reloaded',
      nextPage: '‚û°Ô∏è Moving to next page...',
      lastPage: '‚úÖ Last page reached, no more pages to process.',
      notesFound: '‚úÖ Notes found across all pages:',
      noNotesFound: '‚ö†Ô∏è No Notes found in any pages.',
      chooserNotFound: '‚ùå Column Chooser button not found',
      searchInputVisible: 'üõë Search input visible ‚Äî blurring it...',
      applyButtonNotVisible: '‚ö†Ô∏è Apply button not visible, attempting force click...',
      applyJSFailed: '‚ùå Apply JS click failed, fallback to Playwright force click...',
    },
    excludedNoteTexts: ['undefined'],
  },
  
  uploadFile: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-002',
    selectors: {
      uploadCardButton: '.upload-card button.btn-link',
      fileInput: '#fileUpload',
      uploadButton: '.e-footer-content button.e-primary:has-text("Upload")',
      successDialog: '.e-alert-dialog .predefined-dialog-content',
      successHeader: '.e-alert-dialog .dialog-text h2',
      successMessage: '.e-alert-dialog .dialog-text p',
      okButton: '.e-alert-dialog button.predefined-dialog:has-text("OK")',
      alertDialog: '.e-alert-dialog',
    },
    uploadData: {
      fileName: 'Sample Purchase Order-1752667727464',
    },
    expectedSuccess: {
      header: 'Success',
      message: 'Files uploaded successfully and sent for processing',
    },
    timeouts: {
      clickHereButton: 15000,
      uploadButton: 10000,
      successDialog: 15000,
      okButton: 15000,
      dialogClose: 5000,
    },
    messages: {
      clickHereClicked: '‚úÖ Clicked "Click Here" to open file selector',
      fileSet: '‚úÖ File set for upload',
      uploadClicked: '‚úÖ Upload button clicked',
      successVerified: '‚úÖ Upload success message verified',
      okClicked: '‚úÖ OK button clicked via evaluate',
      popupClosed: '‚úÖ Upload success popup closed',
      pageReloaded: 'üîÑ Page reloaded after file upload',
    },
  },
  
  complyShipment: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-002',
    selectors: {
      popover: '#driver-popover-content',
      popoverCloseBtn: '#driver-popover-content .driver-popover-close-btn',
      complyButton: 'button:has-text("Comply")',
      rulesetInput: '#rulesetTemplate',
      rulesetDropdownIcon: '#rulesetTemplate ~ .e-input-group-icon.e-ddl-icon',
      rulesetPopup: '#rulesetTemplate_popup',
      rulesetListItem: '#rulesetTemplate_popup .e-list-item',
      selectButton: '.e-dialog .e-footer-content button:has-text("Select")',
      statusBadge: 'td[data-field="status"] .status-badge span.text-white',
    },
    defaultRulesetName: 'Demo Ruleset',
    expectedFileStatus: 'Splitted',
    timeouts: {
      pageLoad: 10000,
      initialWait: 2000,
      popoverVisible: 5000,
      popoverHidden: 7000,
      uiStabilize: 1000,
      rulesetInputVisible: 15000,
      rulesetPopupVisible: 15000,
      rulesetOptionsVisible: 7000,
      optionSettle: 500,
      selectionRegister: 800,
      fileStatusCheck: 90000,
      fileStatusInterval: 5000,
    },
    messages: {
      navigated: 'üöÄ Navigated to shipment page',
      popoverWait: '‚è≥ Waiting for possible popover (max 5s)...',
      popoverDetected: '‚ö†Ô∏è Popover detected, attempting to close it...',
      popoverClosed: '‚úÖ Popover closed successfully',
      noPopover: '‚úÖ No popover detected ‚Äî continuing.',
      complyClicked: '‚úÖ Clicked "Comply (All)" button',
      rulesetInputVisible: '‚úÖ Ruleset input field visible',
      dropdownClicked: '‚úÖ Clicked dropdown icon for ruleset list',
      rulesetSelected: '‚úÖ Selected ruleset: "{rulesetName}"',
      selectClicked: '‚úÖ Clicked "Select" to confirm ruleset',
      waitingForStatus: '‚è≥ Waiting for file status to change to "{expectedStatus}"...',
      statusChanged: '‚úÖ File status changed to "{expectedStatus}"',
      currentStatus: '‚è≥ Current status: "{currentStatus}", waiting...',
      statusNotFound: '‚è≥ Status element not found yet, continuing to wait...',
      statusTimeout: 'Timeout: File status did not change to "{expectedStatus}" within {maxWaitTime}ms',
    },
  },
  
  captureDocuments: {
    baseUrl: 'https://demo.tradingdocs.ai',
    shipmentPath: '/shipment/TEST-002',
    selectors: {
      tableRow: 'tr.e-row',
      tableHeader: 'thead tr',
      checkbox: 'div.e-checkbox-wrapper',
      selectedRow: 'tr.e-row.e-selectionbackground, tr.e-row.e-active, tr.e-row[aria-selected="true"]',
      captureButton: '#captureBtn',
      modal: 'div.e-dialog.e-popup-open[role="dialog"]',
      dropdown: 'span.e-input-group.e-control-wrapper.e-ddl.e-lib.e-keyboard',
      modalCaptureButton: 'button.e-control.e-btn.e-lib.e-primary.e-flat',
      okButton: 'button.predefined-dialog.e-control.e-btn.e-lib.e-primary.e-flat',
      documentNameCell: 'td[data-field="documentName"]',
    },
    captureData: {
      targetDocument: 'Purchase Order - A',
    },
    timeouts: {
      tableRow: 10000,
      captureButton: 7000,
      modal: 7000,
      modalCapture: 7000,
      modalClose: 7000,
      okButton: 7000,
      shortDelay: 500,
      dropdownDelay: 1000,
      captureDelay: 2000,
    },
  },
};